{"ast":null,"code":"var _jsxFileName = \"/Users/mayyabareeva/Downloads/React-Applications-main/forms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [inputFieldTouched, setInputFieldTouched] = useState(false);\n  const [emailFieldTouched, setEmailFieldTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const enteredEmailIsValid = enteredName.includes('@');\n  const nameInputIsInvalid = inputFieldTouched && !enteredNameIsValid;\n  const emailInputIsInvalid = emailFieldTouched && !enteredEmailIsValid;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setInputFieldTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n  };\n\n  const emailInputBlurHandler = event => {\n    setEmailFieldTouched(true);\n\n    if (!enteredEmailIsValid) {\n      return;\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setInputFieldTouched(true);\n    setEmailFieldTouched(true);\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    setEnteredName('');\n    setEnteredEmail('');\n    setInputFieldTouched(false);\n    setEmailFieldTouched(false);\n  };\n\n  const nameInputClasses = !nameInputIsInvalid ? 'form-control' : 'form-control invalid ';\n  const emailInputClasses = !nameInputIsInvalid ? 'form-control' : 'form-control invalid ';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: 'input',\n        children: \"Invalid input. Entered name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: 'input',\n        children: \"Invalid input. Entered email must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"AHF4BiehPLcGtMu9Cn4IPojtdRA=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/mayyabareeva/Downloads/React-Applications-main/forms/src/components/SimpleInput.js"],"names":["useEffect","useState","SimpleInput","props","enteredName","setEnteredName","enteredEmail","setEnteredEmail","inputFieldTouched","setInputFieldTouched","emailFieldTouched","setEmailFieldTouched","enteredNameIsValid","trim","enteredEmailIsValid","includes","nameInputIsInvalid","emailInputIsInvalid","formIsValid","nameInputChangeHandler","event","target","value","emailInputChangeHandler","nameInputBlurHandler","emailInputBlurHandler","formSubmissionHandler","preventDefault","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import {useEffect, useState} from 'react'\n\nconst SimpleInput = (props) => {\n    const [enteredName, setEnteredName] = useState('')\n    const [enteredEmail, setEnteredEmail] = useState('')\n\n    const [inputFieldTouched, setInputFieldTouched] = useState(false)\n    const [emailFieldTouched, setEmailFieldTouched] = useState(false)\n\n    const enteredNameIsValid = enteredName.trim() !== ''\n    const enteredEmailIsValid = enteredName.includes('@')\n\n    const nameInputIsInvalid = inputFieldTouched && !enteredNameIsValid\n    const emailInputIsInvalid = emailFieldTouched && !enteredEmailIsValid\n\n    let formIsValid = false;\n    if(enteredNameIsValid && enteredEmailIsValid) {\n        formIsValid = true\n    }\n\n    const nameInputChangeHandler = event => {\n        setEnteredName(event.target.value);\n    }\n\n    const emailInputChangeHandler = event => {\n        setEnteredEmail(event.target.value);\n    }\n\n    const nameInputBlurHandler = event => {\n        setInputFieldTouched(true)\n        if(!enteredNameIsValid) {\n            return\n        }\n    }\n    const emailInputBlurHandler = event => {\n        setEmailFieldTouched(true)\n        if(!enteredEmailIsValid) {\n            return\n        }\n    }\n\n    const formSubmissionHandler = event => {\n        event.preventDefault()\n        setInputFieldTouched(true)\n        setEmailFieldTouched(true)\n        if(!enteredNameIsValid || !enteredEmailIsValid) {\n            return;\n        }\n        setEnteredName('')\n        setEnteredEmail('')\n        setInputFieldTouched(false)\n        setEmailFieldTouched(false)\n    }\n\n    const nameInputClasses = !nameInputIsInvalid ? 'form-control' : 'form-control invalid '\n    const emailInputClasses = !nameInputIsInvalid ? 'form-control' : 'form-control invalid '\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameInputChangeHandler} onBlur={nameInputBlurHandler} value={enteredName}/>\n          {nameInputIsInvalid && <p className={'input'}>Invalid input. Entered name must not be empty.</p>}\n      </div >\n        <div className={emailInputClasses}>\n            <label htmlFor='email'>Your Email</label>\n            <input type='email' id='email' onChange={emailInputChangeHandler} onBlur={emailInputBlurHandler} value={enteredEmail}/>\n            {emailInputIsInvalid && <p className={'input'}>Invalid input. Entered email must not be empty.</p>}\n        </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}