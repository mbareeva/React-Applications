{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0,\n  changed: false\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {\n    replaceCart(state, action) {\n      state.items = action.payload.items;\n      state.totalQuantity = action.payload.totalQuantity;\n    },\n\n    addItem(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      state.changed = true;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/mayyabareeva/Documents/React-applications/React-Applications/redux-advanced/src/store/cart.js"],"names":["createSlice","initialCartState","items","totalQuantity","changed","cartSlice","name","initialState","reducers","replaceCart","state","action","payload","addItem","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItem","filter","cartActions","actions"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,gBAAgB,GAAG;AAAEC,EAAAA,KAAK,EAAE,EAAT;AAAaC,EAAAA,aAAa,EAAE,CAA5B;AAA+BC,EAAAA,OAAO,EAAE;AAAxC,CAAzB;AACA,MAAMC,SAAS,GAAGL,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAEN,gBAFY;AAG1BO,EAAAA,QAAQ,EAAE;AACNC,IAAAA,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACR,KAAN,GAAcS,MAAM,CAACC,OAAP,CAAeV,KAA7B;AACIQ,MAAAA,KAAK,CAACP,aAAN,GAAsBQ,MAAM,CAACC,OAAP,CAAeT,aAArC;AACP,KAJK;;AAKNU,IAAAA,OAAO,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACnB,YAAMG,OAAO,GAAGH,MAAM,CAACC,OAAvB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACR,KAAN,CAAYc,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAA7C,CAArB;AACAR,MAAAA,KAAK,CAACP,aAAN;AACAO,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;;AACA,UAAG,CAACW,YAAJ,EAAkB;AACdL,QAAAA,KAAK,CAACR,KAAN,CAAYiB,IAAZ,CAAiB;AACbD,UAAAA,EAAE,EAAEJ,OAAO,CAACI,EADC;AAEbE,UAAAA,KAAK,EAAEN,OAAO,CAACM,KAFF;AAGbC,UAAAA,QAAQ,EAAE,CAHG;AAIbC,UAAAA,UAAU,EAAER,OAAO,CAACM,KAJP;AAKbd,UAAAA,IAAI,EAAEQ,OAAO,CAACS;AALD,SAAjB;AAOH,OARD,MAQO;AACHR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACH;AACJ,KAtBK;;AAuBNI,IAAAA,UAAU,CAACd,KAAD,EAAQC,MAAR,EAAgB;AACtB,YAAMO,EAAE,GAAGP,MAAM,CAACC,OAAlB;AACA,YAAMG,YAAY,GAAGL,KAAK,CAACR,KAAN,CAAYc,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAR,MAAAA,KAAK,CAACP,aAAN;AACAO,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;;AACA,UAAGW,YAAY,CAACM,QAAb,KAA0B,CAA7B,EAAgC;AAC5BX,QAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACR,KAAN,CAAYuB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACH,OAFD,MAEO;AACHH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACH;AACJ;;AAlCK;AAHgB,CAAD,CAA7B;AA2CA,OAAO,MAAMM,WAAW,GAAGrB,SAAS,CAACsB,OAA9B;AACP,eAAetB,SAAf","sourcesContent":["import {createSlice} from '@reduxjs/toolkit';\n\nconst initialCartState = { items: [], totalQuantity: 0, changed: false  }\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: initialCartState,\n    reducers: {\n        replaceCart(state, action) {\n            state.items = action.payload.items\n                state.totalQuantity = action.payload.totalQuantity\n        },\n        addItem(state, action) {\n            const newItem = action.payload\n            const existingItem = state.items.find(item => item.id === newItem.id)\n            state.totalQuantity++\n            state.changed = true\n            if(!existingItem) {\n                state.items.push({\n                    id: newItem.id,\n                    price: newItem.price,\n                    quantity: 1,\n                    totalPrice: newItem.price,\n                    name: newItem.title\n                })\n            } else {\n                existingItem.quantity++\n                existingItem.totalPrice = existingItem.totalPrice + existingItem.price\n            }\n        },\n        removeItem(state, action) {\n            const id = action.payload\n            const existingItem = state.items.find(item => item.id === id)\n            state.totalQuantity--\n            state.changed = true\n            if(existingItem.quantity === 1) {\n                state.items = state.items.filter(item => item.id !== id)\n            } else {\n                existingItem.quantity--\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price\n            }\n        }\n    }\n})\n\n\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}